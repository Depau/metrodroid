language: java
jdk: oraclejdk8

env:
  global:
    # Android SDK tools package to use
    - ANDROID_SDK_URL=https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
    - ANDROID_SDK_SHA256=92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9

    # Android compile targets
    - ANDROID_API=28
    - ANDROID_BUILD_TOOLS=28.0.3

    # EMULATOR
    - EMULATOR_ARCH=armeabi-v7a
    - EMULATOR_FLAVOUR=default

    # These are all constants -- you shouldn't need to update these.
    - ANDROID_SDK_ROOT=$HOME/android-sdk
    - ADB=$ANDROID_SDK_ROOT/platform-tools/adb
    - AVDMANAGER=$ANDROID_SDK_ROOT/tools/bin/avdmanager
    - SDKMANAGER=$ANDROID_SDK_ROOT/tools/bin/sdkmanager
    - EMULATOR=$ANDROID_SDK_ROOT/emulator/emulator

    # Pointless in CI.
    - QEMU_AUDIO_DRV=none

jobs:
  include:
    # This only runs "assemble", which compiles the code and runs non-Android unit tests. This is
    # normally fast -- and allows quick feedback in case of compiler errors (before running the
    # more expensive test cases).
    #
    # This is run in parallel (debug + dev + release)
    - stage: assemble and unit test
      install: ./.travis/install_android_sdk.sh
      script: ./gradlew assembleDebug testDebugUnitTest
    - install: ./.travis/install_android_sdk.sh
      script: ./gradlew assembleDev testDevUnitTest
    - install: ./.travis/install_android_sdk.sh
      script: ./gradlew assembleRelease testReleaseUnitTest

    # This runs the full test suite, including using the Android emulator.
    - stage: test
      env: EMULATOR_API=16
    - env: EMULATOR_API=18
    # Disabled due to https://issuetracker.google.com/issues/134845202
    # - env: EMULATOR_API=21
    - env: EMULATOR_API=21 EMULATOR_FLAVOUR=google_apis
    - env: EMULATOR_API=21 EMULATOR_ARCH=x86 EMULATOR_ARGS=-no-accel
    - env: EMULATOR_API=24
    - env: EMULATOR_API=24 EMULATOR_ARCH=arm64-v8a
    - env: EMULATOR_API=24 EMULATOR_ARCH=x86 EMULATOR_ARGS=-no-accel
    - env: EMULATOR_API=24 EMULATOR_ARCH=x86_64 EMULATOR_ARGS=-no-accel
    - env: EMULATOR_API=28 EMULATOR_ARCH=x86 EMULATOR_ARGS=-no-accel
    - env: EMULATOR_API=28 EMULATOR_ARCH=x86_64 EMULATOR_ARGS=-no-accel

install:
  - ./.travis/install_android_sdk.sh
  - ./.travis/android_emulator.sh

script:
  # This takes a few minutes, so we can do this while waiting for an emulator.
  - ./gradlew assemble

  # Check that the emulator is ready for us.
  - ./.travis/android_wait.sh

  # Now run the emulator-side tests.
  - ./gradlew connectedAndroidTest

before_cache:
  - ./gradlew --stop

  # Gradle, general files
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/journal-1/
  # Appears non-hermetic
  - rm -f  $HOME/.gradle/caches/transforms-2/files-2.1/*/android.jar

  # Gradle, version-specific files
  - rm -fr $HOME/.gradle/caches/*/executionHistory/
  - rm -fr $HOME/.gradle/caches/*/fileHashes/
  - rm -f  $HOME/.gradle/caches/*/javaCompile/javaCompile.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/

cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/.android/build-cache

    # Selectively cache the installed Android SDK.
    # Contrary to Travis CI's docs, the slow part is "installing" (particularly scanning remote
    # repositories). This turns "installing the SDK" into a very simple download and extract
    # operation (much simpler than what sdkmanager does).
    - $HOME/android-sdk/build-tools/$ANDROID_BUILD_TOOLS
    - $HOME/android-sdk/extras
    - $HOME/android-sdk/fonts
    - $HOME/android-sdk/licenses
    - $HOME/android-sdk/patcher
    - $HOME/android-sdk/platforms/android-$ANDROID_API
    - $HOME/android-sdk/tools

    # Android test environment.
    # Travis keeps a cache per environment, so lets cache emulators!
    - $HOME/android-sdk/emulator
    - $HOME/android-sdk/platform-tools
    - $HOME/android-sdk/system-images/android-$EMULATOR_API/default/$EMULATOR_ARCH
