import au.id.micolous.metrodroid.LocalizeGenerator

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
}

buildscript {
    ext {
        kotlin_version = '1.3.31'
        kotlinio_version = '0.1.3'
        kotlinserial_version = '0.10.0'
        lint_version = '26.2.1'
        support_version = '28.0.0'
        android_test_version = '1.2.0'
        hamcrest_version = '1.3'
        build_version = '28.0.3'
        android_sdk_version = 28
        android_min_version = 16
    }
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.google.protobuf'
apply plugin: 'checkstyle'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'

def generatedLocalizeDir = new File(buildDir, "generated/source/localize")
def drawableDir = new File(projectDir, "src/main/res/drawable")
def drawableHdpiDir = new File(projectDir, "src/main/res/drawable-hdpi")
def stringsXmlFile = new File(projectDir, "src/main/res/values/strings.xml")

task generateLocalize {
    inputs.file stringsXmlFile
    inputs.dir drawableDir
    inputs.dir drawableHdpiDir
    outputs.dir generatedLocalizeDir
    doLast {
        LocalizeGenerator.INSTANCE.generateLocalize(generatedLocalizeDir, stringsXmlFile, [drawableDir, drawableHdpiDir])
    }
}

preBuild.dependsOn generateLocalize

/*
check.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {
    source 'src'
    include '** /*.java'
    exclude '** /gen/**'
    classpath = files()
}
*/

dependencies {
    implementation("androidx.appcompat:appcompat:1.0.0")
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.annotation:annotation:1.0.0"
    implementation "androidx.preference:preference:1.0.0"
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
    implementation 'com.neovisionaries:nv-i18n:1.23'
    implementation project(':leaflet')
    implementation project(':material-design-icons')

    implementation 'com.github.bmelnychuk:atv:1.2.9'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestUtil "androidx.test:orchestrator:$android_test_version"
    androidTestImplementation "androidx.test:rules:$android_test_version"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "org.hamcrest:hamcrest-core:$hamcrest_version"
    androidTestImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"

    lintChecks project(':lintchecks')
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.7.1'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }
}

task copyThirdPartyNotices(type: Copy) {
    from 'third_party/'
    into 'build/assets/third_party'
    eachFile { it.path = name }
    include 'NOTICE.**.txt'
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinserial_version"
                api "org.jetbrains.kotlinx:kotlinx-io:$kotlinio_version"
                api "com.github.cretz.pbandk:pbandk-runtime-common:0.3.0"
            }

            kotlin.srcDirs += new File(generatedLocalizeDir, 'commonMain/kotlin')
            kotlin.srcDirs += new File(buildDir, "generated/source/proto/debug/kotlin")
        }

        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api "org.jetbrains.kotlinx:kotlinx-io:$kotlinio_version"
            }
        }

        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:$kotlinio_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.0"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinserial_version"
            }

            kotlin.srcDirs += new File(generatedLocalizeDir, 'androidMain/kotlin')
            kotlin.srcDirs += 'src/jvmCommonMain/kotlin'
        }

        androidTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.0"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinserial_version"
                implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:$kotlinio_version"
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}

android {
    compileSdkVersion android_sdk_version
    buildToolsVersion build_version

    defaultConfig {
        minSdkVersion android_min_version
        targetSdkVersion android_sdk_version
        testApplicationId "au.id.micolous.farebot.test"
        versionCode "git -C ${projectDir} rev-list --count HEAD".execute().text.trim().toInteger()
        versionName "git -C ${projectDir} describe --always --tags --dirty".execute().text.trim().replaceAll("^v", "")

        resConfigs ([
                // Update this whenever new language translations become available in Weblate.
                // Languages we support
                'en', 'en-rAU', 'en-rCA', 'en-rGB', 'en-rIE', 'en-rIN',  'en-rNZ', 'en-rUS',
                'de',
                'es',
                'fi',
                'fr',
                'ga',
                // Hebrew
                'he', 'iw',
                // Indonesian
                'id', 'in',
                'ja',
                'kab',
                'mi',
                'ms',
                'nb-rNO',
                'nl',
                'ru',
                'tr',
                'zh-rCN',
                'zh-rHK',
                'zh-rSG',
                'zh-rTW',

                // UI mode


        ])
        vectorDrawables {
            useSupportLibrary = true
            generatedDensities 'ldpi', 'mdpi', 'hdpi'
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        debug {
            pseudoLocalesEnabled true
        }
        dev.initWith(buildTypes.debug)
        dev {
            applicationIdSuffix '.dev'
            minifyEnabled true
            shrinkResources true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard.cfg'
            matchingFallbacks = ['debug']
        }
        release {
            minifyEnabled true
            shrinkResources true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard.cfg'
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name.equals("debug")) {
            variant.mergedFlavor.resourceConfigurations.add("en-rXA")
            variant.mergedFlavor.resourceConfigurations.add("ar-rXB")
        }
    }

    preBuild.dependsOn copyThirdPartyNotices

    sourceSets {
        androidTest.assets.srcDirs += [
                'src/commonTest/assets',
                'third_party/vpereira_bilhete/',
                'third_party/RejsekortReader/dumps/'
        ]
        main.assets.srcDirs += ['build/assets', 'mdst']
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/kotlinx-io.kotlin_module'
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }
}
androidExtensions {
    // Needed for kotlinx.android.parcel.Parcelize
    experimental = true
}
repositories {
    mavenCentral()
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

// Activate reproducible archives
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
